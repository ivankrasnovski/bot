import os
import sys
import subprocess
import logging
import random
import string
from pathlib import Path
from datetime import datetime, timedelta, time

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    ConversationHandler,
    ContextTypes
)
from google.oauth2.service_account import Credentials
import gspread

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–±—É–¥—É—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway)
TOKEN = os.getenv("TELEGRAM_TOKEN", "7961657553:AAEnDVjmm1QKyhboAtZobv5FupLJDtBPvI8")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID", "1VV_CJ63OlYKiSDupGQp1BilGKHdO8k3Yl3Ti0LZEljk")
CREDS_JSON = os.getenv("GOOGLE_CREDS_JSON")  # –ü–æ–ª–Ω—ã–π JSON credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

REQUIRED_LIBRARIES = [
    'python-telegram-bot[job-queue]',
    'gspread',
    'google-auth',
    'google-auth-oauthlib',
    'google-auth-httplib2'
]

def install_packages():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫"""
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade"] + REQUIRED_LIBRARIES)
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        return False

def generate_order_number():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞: 4 –±—É–∫–≤—ã + 4 —Ü–∏—Ñ—Ä—ã"""
    letters = ''.join(random.choices(string.ascii_uppercase, k=4))
    numbers = ''.join(random.choices(string.digits, k=4))
    return f"{letters}{numbers}"

def parse_price(price_str):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ü–µ–Ω–æ–π –≤ float, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
    try:
        cleaned = price_str.replace(',', '.').replace(' ', '')
        return float(cleaned)
    except (ValueError, AttributeError):
        return 0.0

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(MAIN_MENU, ORDER_MENU, ORDER_NAME, ORDER_DATE, DELETE_ORDER, MY_ORDERS) = range(6)

class OrderBot:
    def __init__(self):
        self.client = None
        self.sheet = None
        self.menu1 = []
        self.menu2 = []
        self.menu3 = []
        self.id_worksheet = None
        self.init_google_sheets()
        self.initialize_sheets()

    def init_google_sheets(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if CREDS_JSON:
                import json
                creds_data = json.loads(CREDS_JSON)
                creds = Credentials.from_service_account_info(creds_data)
            else:
                raise Exception("GOOGLE_CREDS_JSON environment variable is not set")
            
            self.client = gspread.authorize(creds)
            self.sheet = self.client.open_by_key(SPREADSHEET_ID)
            logger.info("üîå –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–∞–º")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Google Sheets: {e}")
            raise

    def initialize_sheets(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏ –∏ ID"""
        try:
            # –õ–∏—Å—Ç –¥–ª—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            try:
                self.id_worksheet = self.sheet.worksheet("ID")
            except gspread.exceptions.WorksheetNotFound:
                self.id_worksheet = self.sheet.add_worksheet(title="ID", rows=1000, cols=1)
                self.id_worksheet.append_row(["Chat ID"])
                logger.info("üìã –õ–∏—Å—Ç –¥–ª—è ID —Å–æ–∑–¥–∞–Ω")

            # –õ–∏—Å—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
            sheet_titles = ["–ó–∞–∫–∞–∑—ã –ú–µ–Ω—é1", "–ó–∞–∫–∞–∑—ã –ú–µ–Ω—é2", "–ó–∞–∫–∞–∑—ã –ú–µ–Ω—é3"]
            for title in sheet_titles:
                try:
                    worksheet = self.sheet.worksheet(title)
                except gspread.exceptions.WorksheetNotFound:
                    worksheet = self.sheet.add_worksheet(title=title, rows=100, cols=9)

                records = worksheet.get_all_records()
                if not records or len(records[0]) < 9:
                    worksheet.clear()
                    worksheet.append_row([
                        "üî¢ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", "‚è∞ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è",
                        "üë§ –§–ò–û", "üí¨ Chat ID", "üçΩ –ú–µ–Ω—é", "üìÜ –î–∞—Ç–∞ –≤—ã–∫—É–ø–∞",
                        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å"
                    ])
            logger.info("üìã –í—Å–µ –ª–∏—Å—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–∏—Å—Ç–æ–≤: {e}")
            raise

    def refresh_menu_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ü–µ–Ω"""
        try:
            worksheet = self.sheet.worksheet("–ú–µ–Ω—é")
            self.menu1 = []
            self.menu2 = []
            self.menu3 = []

            menu1_data = worksheet.get_values('A2:B')
            self.menu1 = [
                (item, parse_price(price))
                for item, price in menu1_data
                if item and price
            ]

            menu2_data = worksheet.get_values('C2:D')
            self.menu2 = [
                (item, parse_price(price))
                for item, price in menu2_data
                if item and price
            ]

            menu3_data = worksheet.get_values('E2:F')
            self.menu3 = [
                (item, parse_price(price))
                for item, price in menu3_data
                if item and price
            ]

            logger.info("üîÑ –ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é: {e}")
            return False

    def save_user_id(self, chat_id):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏—Å—Ç ID"""
        try:
            existing_ids = self.id_worksheet.col_values(1)
            if str(chat_id) not in existing_ids:
                self.id_worksheet.append_row([str(chat_id)])
                logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–≤—ã–π Chat ID: {chat_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Chat ID: {e}")

    def get_all_users(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ chat_id –∏–∑ –ª–∏—Å—Ç–∞ ID"""
        try:
            return self.id_worksheet.col_values(1)[1:]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        context.user_data.clear()

        keyboard = [
            ['üçΩ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑'],
            ['üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã']
        ]

        await update.message.reply_text(
            "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FoodBot! ‚ú®\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )

        return MAIN_MENU

    async def show_my_orders(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–∫—É—â—É—é –∏ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã"""
        try:
            chat_id = update.message.chat.id
            today = datetime.now().date()
            orders = []

            for sheet_name in ["–ó–∞–∫–∞–∑—ã –ú–µ–Ω—é1", "–ó–∞–∫–∞–∑—ã –ú–µ–Ω—é2", "–ó–∞–∫–∞–∑—ã –ú–µ–Ω—é3"]:
                try:
                    worksheet = self.sheet.worksheet(sheet_name)
                    records = worksheet.get_all_records()

                    for record in records:
                        if str(record.get("üí¨ Chat ID")) == str(chat_id):
                            try:
                                order_date = datetime.strptime(record.get("üìÜ –î–∞—Ç–∞ –≤—ã–∫—É–ø–∞", ""), "%d.%m.%Y").date()
                                if order_date >= today:
                                    orders.append({
                                        'date': order_date,
                                        'name': record.get("üë§ –§–ò–û", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                                        'menu': record.get("üçΩ –ú–µ–Ω—é", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                                        'order_number': record.get("üî¢ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–ù–µ —É–∫–∞–∑–∞–Ω"),
                                        'price': record.get("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
                                    })
                            except ValueError:
                                continue
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–∏—Å—Ç–∞ {sheet_name}: {e}")
                    continue

            if not orders:
                await update.message.reply_text(
                    "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Ç–µ–∫—É—â—É—é –∏ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã.",
                    reply_markup=ReplyKeyboardMarkup(
                        [['üçΩ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑'], ['üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã']],
                        resize_keyboard=True
                    )
                )
                return MAIN_MENU

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –¥–∞—Ç–µ
            orders.sort(key=lambda x: x['date'])

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
            for order in orders:
                message += (
                    f"üë§ –§–ò–û: {order['name']}\n"
                    f"üìÖ –î–∞—Ç–∞: {order['date'].strftime('%d.%m.%Y')}\n"
                    f"üçΩ –ú–µ–Ω—é: {order['menu']}\n"
                    f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order['price']} ‚ÇΩ\n"
                    f"üî¢ –ù–æ–º–µ—Ä: {order['order_number']}\n"
                    f"‚ÑπÔ∏è –°—Ç–æ–ª–æ–≤—ã–µ –ø—Ä–∏–±–æ—Ä—ã –∏ —Ö–ª–µ–± –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–∞ –º–µ—Å—Ç–µ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞!üôÇ\n\n"
                )

            await update.message.reply_text(
                message,
                reply_markup=ReplyKeyboardMarkup(
                    [['üçΩ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑'], ['üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã']],
                    resize_keyboard=True
                )
            )
            return MAIN_MENU

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=ReplyKeyboardMarkup(
                    [['üçΩ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑'], ['üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã']],
                    resize_keyboard=True
                )
            )
            return MAIN_MENU

    async def show_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é"""
        try:
            if not self.refresh_menu_data():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ–Ω—é")

            menu1_text = "üçΩÔ∏è *–ú–µ–Ω—é 1*:\n" + "\n".join(
                f"‚Ä¢ {item} - {price:.2f} ‚ÇΩ"
                for item, price in self.menu1
                if item
            )

            menu2_text = "üç≤ *–ú–µ–Ω—é 2*:\n" + "\n".join(
                f"‚Ä¢ {item} - {price:.2f} ‚ÇΩ"
                for item, price in self.menu2
                if item
            )

            menu3_text = "üçõ *–ú–µ–Ω—é 3*:\n" + "\n".join(
                f"‚Ä¢ {item} - {price:.2f} ‚ÇΩ"
                for item, price in self.menu3
                if item
            )

            await update.message.reply_text(
                f"{menu1_text}\n\n{menu2_text}\n\n{menu3_text}",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardMarkup(
                    [['–ú–µ–Ω—é 1', '–ú–µ–Ω—é 2', '–ú–µ–Ω—é 3'], ['‚Ü©Ô∏è –ù–∞–∑–∞–¥']],
                    resize_keyboard=True
                )
            )

            return ORDER_MENU
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=ReplyKeyboardMarkup(
                    [['‚Ü©Ô∏è –ù–∞–∑–∞–¥']],
                    resize_keyboard=True
                )
            )
            return await self.start(update, context)

    async def get_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∏—Ç—å –§–ò–û"""
        text = update.message.text

        if text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.start(update, context)

        if text not in ['–ú–µ–Ω—é 1', '–ú–µ–Ω—é 2', '–ú–µ–Ω—é 3']:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
                reply_markup=ReplyKeyboardMarkup(
                    [['–ú–µ–Ω—é 1', '–ú–µ–Ω—é 2', '–ú–µ–Ω—é 3'], ['‚Ü©Ô∏è –ù–∞–∑–∞–¥']],
                    resize_keyboard=True
                )
            )
            return ORDER_MENU

        context.user_data['menu'] = text
        price = self.calculate_menu_price(text)
        context.user_data['menu_price'] = f"{price:.2f}"

        await update.message.reply_text(
            "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –§–ò–û:",
            reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
        )

        return ORDER_NAME

    async def get_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –≤—ã–∫—É–ø–∞"""
        text = update.message.text

        if text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.show_menu(update, context)

        context.user_data['name'] = text

        await update.message.reply_text(
            "üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–∫—É–ø–∞ –∑–∞–∫–∞–∑–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):",
            reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
        )

        return ORDER_DATE

    async def validate_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã"""
        text = update.message.text

        if text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
            return await self.get_name(update, context)

        try:
            date_obj = datetime.strptime(text, "%d.%m.%Y")
            today = datetime.now().date()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞—é—Ç—Å—è –ª–∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –ø–æ—Å–ª–µ 12:00
            if date_obj.date() == today + timedelta(days=1) and datetime.now().time() >= time(12, 0):
                await update.message.reply_text(
                    "–ü—Ä–∏–µ–º –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±–µ–¥ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ - –∑–∞–∫—Ä—ã—Ç —Å 12.00!\n"
                    "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–∫–∞–∑—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å - –¥–æ 12 —á–∞—Å–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è!",
                    reply_markup=ReplyKeyboardMarkup(
                        [['üçΩ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑'], ['üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã']],
                        resize_keyboard=True
                    )
                )
                return MAIN_MENU

            if date_obj.date() < today:
                await update.message.reply_text(
                    "‚ö†Ô∏è –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º!",
                    reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
                )
                return ORDER_DATE

            context.user_data['order_date'] = text
            return await self.save_order(update, context)

        except ValueError:
            await update.message.reply_text(
                "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
                reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
            )
            return ORDER_DATE

    async def save_order(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑"""
        try:
            user_data = context.user_data
            chat_id = update.message.chat.id

            self.save_user_id(chat_id)

            required_fields = ['name', 'menu', 'order_date', 'menu_price']
            for field in required_fields:
                if field not in user_data:
                    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
                    raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")

            if user_data['menu'] == '–ú–µ–Ω—é 1':
                worksheet = self.sheet.worksheet("–ó–∞–∫–∞–∑—ã –ú–µ–Ω—é1")
            elif user_data['menu'] == '–ú–µ–Ω—é 2':
                worksheet = self.sheet.worksheet("–ó–∞–∫–∞–∑—ã –ú–µ–Ω—é2")
            else:
                worksheet = self.sheet.worksheet("–ó–∞–∫–∞–∑—ã –ú–µ–Ω—é3")

            order_number = generate_order_number()

            row_data = [
                order_number,
                datetime.now().strftime("%d.%m.%Y"),
                datetime.now().strftime("%H:%M:%S"),
                user_data['name'],
                str(chat_id),
                user_data['menu'],
                user_data['order_date'],
                user_data['menu_price']
            ]

            worksheet.append_row(row_data)
            logger.info(f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {row_data}")

            await update.message.reply_text(
                f"""
‚úÖ *–ó–∞–∫–∞–∑ ‚Ññ{order_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!*

üë§ *–§–ò–û:* {user_data['name']}
üçΩ *–ú–µ–Ω—é:* {user_data['menu']}
üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {user_data['menu_price']} ‚ÇΩ
üìÜ *–î–∞—Ç–∞ –≤—ã–∫—É–ø–∞:* {user_data['order_date']}
üî¢ *–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:* `{order_number}`

‚ÑπÔ∏è –°—Ç–æ–ª–æ–≤—ã–µ –ø—Ä–∏–±–æ—Ä—ã –∏ —Ö–ª–µ–± –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–∞ –º–µ—Å—Ç–µ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞!üôÇ
                """,
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardMarkup(
                    [['üçΩ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑'], ['üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã']],
                    resize_keyboard=True
                )
            )

            return MAIN_MENU
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=ReplyKeyboardMarkup(
                    [['üçΩ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑'], ['üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã']],
                    resize_keyboard=True
                )
            )
            return MAIN_MENU

    async def delete_order(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        await update.message.reply_text(
            "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç: ABCD1234):",
            reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
        )

        return DELETE_ORDER

    async def execute_delete(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"""
        try:
            text = update.message.text

            if text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
                return await self.start(update, context)

            order_number = text.upper().strip()
            today = datetime.now().date()
            current_time = datetime.now().time()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç—Ä–∏ –ª–∏—Å—Ç–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏
            for sheet_name in ["–ó–∞–∫–∞–∑—ã –ú–µ–Ω—é1", "–ó–∞–∫–∞–∑—ã –ú–µ–Ω—é2", "–ó–∞–∫–∞–∑—ã –ú–µ–Ω—é3"]:
                try:
                    worksheet = self.sheet.worksheet(sheet_name)
                    orders = worksheet.get_all_records()

                    for order in orders:
                        if order.get("üî¢ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞") == order_number:
                            try:
                                order_date = datetime.strptime(order.get("üìÜ –î–∞—Ç–∞ –≤—ã–∫—É–ø–∞", ""), "%d.%m.%Y").date()

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞—é—Ç—Å—è –ª–∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –ø–æ—Å–ª–µ 12:00
                                if order_date == today + timedelta(days=1) and current_time >= time(12, 0):
                                    await update.message.reply_text(
                                        "–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å–ª–µ 12.00 –Ω–∞ –∑–∞–≤—Ç—Ä–∞ - –∑–∞–ø—Ä–µ—â–µ–Ω–æ!\n"
                                        "–í—ã –æ–±—è–∑–∞–Ω—ã –æ–ø–ª–∞—Ç–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑.",
                                        reply_markup=ReplyKeyboardMarkup(
                                            [['üçΩ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑'], ['üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã']],
                                            resize_keyboard=True
                                        )
                                    )
                                    return MAIN_MENU

                                # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞, —É–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
                                row_num = orders.index(order) + 2  # +1 –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞, +1 –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Å 1
                                worksheet.delete_rows(row_num)

                                await update.message.reply_text(
                                    f"üóë –ó–∞–∫–∞–∑ ‚Ññ{order_number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                                    reply_markup=ReplyKeyboardMarkup(
                                        [['üçΩ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑'], ['üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã']],
                                        resize_keyboard=True
                                    )
                                )
                                return MAIN_MENU
                            except ValueError:
                                continue
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ª–∏—Å—Ç–æ–º {sheet_name}: {e}")
                    continue

            await update.message.reply_text(
                "‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä.",
                reply_markup=ReplyKeyboardMarkup(
                    [['üçΩ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑'], ['üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã']],
                    resize_keyboard=True
                )
            )
            return MAIN_MENU
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=ReplyKeyboardMarkup(
                    [['üçΩ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑'], ['üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã']],
                    resize_keyboard=True
                )
            )
            return MAIN_MENU

    def calculate_menu_price(self, menu_name):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–µ–Ω—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            if menu_name == '–ú–µ–Ω—é 1':
                menu = self.menu1
            elif menu_name == '–ú–µ–Ω—é 2':
                menu = self.menu2
            else:
                menu = self.menu3

            total = sum(price for _, price in menu)
            return round(total, 2)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")
            return 0.0

async def send_morning_message(context: CallbackContext):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ 6:30 (–∫—Ä–æ–º–µ —Å—É–±–±–æ—Ç—ã –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è)"""
    try:
        today = datetime.now().weekday()
        # 5 - —Å—É–±–±–æ—Ç–∞, 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        if today in [5, 6]:
            logger.info("‚ÑπÔ∏è –°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π (—Å—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ), —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è")
            return

        bot = context.application.bot_data['order_bot']
        users = bot.get_all_users()

        if not users:
            logger.info("‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return

        logger.info(f"üîî –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        success_count = 0
        fail_count = 0

        for chat_id in users:
            try:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –Ø —Ö–æ—á—É –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –∑–∞–∫–∞–∑–∞—Ö –Ω–∞ –ø–∏—Ç–∞–Ω–∏–µ. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!üôÇ"
                )
                success_count += 1
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è chat_id {chat_id}")
            except Exception as e:
                fail_count += 1
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è chat_id {chat_id}: {e}")

        logger.info(f"üìä –ò—Ç–æ–≥–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {success_count} —É—Å–ø–µ—à–Ω–æ, {fail_count} —Å –æ—à–∏–±–∫–∞–º–∏")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    if not install_packages():
        print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π. –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏")
        return

    try:
        bot = OrderBot()
        app = Application.builder().token(TOKEN).build()
        app.bot_data['order_bot'] = bot

        job_queue = app.job_queue

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ 6:30 (–∫—Ä–æ–º–µ —Å—É–±–±–æ—Ç—ã –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è)
        job_queue.run_daily(
            send_morning_message,
            time=time(hour=6, minute=30),  # 6:30 —É—Ç—Ä–∞
            days=(0, 1, 2, 3, 4),  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ü—è—Ç–Ω–∏—Ü–∞
            name="morning_message"
        )

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', bot.start)],
            states={
                MAIN_MENU: [
                    MessageHandler(filters.Regex('^üçΩ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑$'), bot.show_menu),
                    MessageHandler(filters.Regex('^‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑$'), bot.delete_order),
                    MessageHandler(filters.Regex('^üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã$'), bot.show_my_orders)
                ],
                ORDER_MENU: [MessageHandler(filters.Regex('^(–ú–µ–Ω—é 1|–ú–µ–Ω—é 2|–ú–µ–Ω—é 3|‚Ü©Ô∏è –ù–∞–∑–∞–¥)$'), bot.get_name)],
                ORDER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.get_date)],
                ORDER_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.validate_date)],
                DELETE_ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.execute_delete)]
            },
            fallbacks=[CommandHandler('start', bot.start)]
        )

        app.add_handler(conv_handler)
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

        # –î–ª—è Railway –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook –∏–ª–∏ polling –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if os.getenv("RAILWAY_ENVIRONMENT"):
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Railway
            PORT = int(os.getenv("PORT", 8000))
            WEBHOOK_URL = os.getenv("WEBHOOK_URL")
            
            if WEBHOOK_URL:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º webhook –Ω–∞ Railway
                app.run_webhook(
                    listen="0.0.0.0",
                    port=PORT,
                    url_path=TOKEN,
                    webhook_url=f"{WEBHOOK_URL}/{TOKEN}"
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç WEBHOOK_URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
                app.run_polling()
        else:
            # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å polling
            app.run_polling()

    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
